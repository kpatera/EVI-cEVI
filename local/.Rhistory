remotes::install_github("ku-awdc/EVI")
require(EVI)
?medvol
getwd()
dir()
devtools::document()
remotes::install_github("ku-awdc/EVI")
remotes::install_github("ku-awdc/EVI")
require(EVI)
?`EVI-package`
?EVI
ls("package:EVI")
?`EVI-package`
deviant
remotes::install_github("ku-awdc/EVI")
remotes::install_github("ku-awdc/EVI",force = T)
deviant=function(new_cases, ratio=1/1.2, lag_max=30, start_cases=14){
#source("mova.r")
#source("medvol.r")
#source("evi.r")
#source("evifcut.r")
#source("indic.r")
#source("status.r")
#source("rollsd.r")
lag_1=7
c_1=0.1
w_s =7
c_s=seq(0.01,0.5, 0.01)
#calculate the moving average of new confrimed cases
cases=mova(new_cases)
roll=rollsd(cases[1:start_cases],lag_1)
ev=evi(roll)
ind=indic(ev,c_1, cases[1:start_cases])
status=status(cases[1:start_cases],w_s,ratio)
#initiate chain for positive predictive value
pvs=rep(NA, length(cases))
#initiate chain for negative predictive value
pvn=rep(NA, length(cases))
lag_all=rep(NA, start_cases)
c_all=rep(NA, start_cases)
se_all=rep(NA, start_cases)
sp_all=rep(NA, start_cases)
lag_all[1:start_cases]=lag_1
c_all[1:start_cases]=c_1
for (i in (start_cases+1): length(cases)){
case_t=cases[1:i]
#case_t=cases[max(1,(i-33)):i]
#lag_s=7
lag_s=seq(lag_1,min(lag_max,(length(case_t)-1)), 1)
#lag_s=seq(lag_1,min(length(case_t),50), 1)
#all_j=NA
all_lag=NA
all_cut=NA
all_se=NA
all_sp=NA
for (j in lag_s){
roll_t=rollsd(case_t,j)
ev_t=evi(roll_t)
for (l in c_s){
evicut_t=evifcut(ev_t, case_t, l, w_s, ratio)
new_j=j
new_l=l
new_se=evicut_t$sens
new_sp=evicut_t$spec
all_lag[[length(all_lag) + 1]] <- new_j
all_cut[[length(all_cut) + 1]] <- new_l
all_se[[length(all_se) + 1]] <- new_se
all_sp[[length(all_sp) + 1]] <- new_sp
}
}
sesp=as.data.frame(cbind(all_lag,all_cut,all_se,all_sp))
#Select the row with the right window and cut
index=which.max(sesp$all_se+sesp$all_sp-1)
#index=sesp[which(sesp$all_sp>0.80),]
#index=which.max(index$all_se)
#index=which(sesp$all_se==1 & sesp$all_sp>=0.95),1)
#if (i>40)
#   {index1=sesp[which(sesp$all_sp>0.95),]
#  index=which.max(index1$all_se)
#   }
#else
#{index=which.max(sesp$all_se+sesp$all_sp-1)}
#index=which(sesp$se>=0.6 & sesp$sp>0.9)
print(i)
print(sesp[index,])
#estimate the parameters for the last observed case
lag_n=sesp$all_lag[index]
c_n=sesp$all_cut[index]
roll_n=rollsd(cases[1:i],lag_n)
ev_n=evi(roll_n)
ind_n=indic(ev_n,c_n, case_t)
evicut_n=evifcut(ev_n, case_t, c_n, w_s, ratio)
roll=c(roll,roll_n[i])
ev=c(ev,ev_n[i])
ind=c(ind, ind_n[i])
lag_all=c(lag_all,lag_n)
c_all=c(c_all,c_n)
se_all=c(se_all,all_se[index])
sp_all=c(sp_all,all_sp[index])
pvs[i]=evicut_n$prev*all_se[index]/
(evicut_n$prev*all_se[index]+(1-evicut_n$prev)*(1-all_sp[index]))
pvn[i]=(1-evicut_n$prev)*all_sp[index]/
((1-evicut_n$prev)*all_sp[index]+evicut_n$prev*(1-all_se[index]))
}
Days=(1:length(cases))
EVI=ev
Cases=cases
Index=ind
EVI_out=as.data.frame(cbind(Days, EVI, Cases, Index, pvs, pvn,
lag_all, c_all, se_all, sp_all))
EVI_output<<-(EVI_out)
}
load("~/GitHub/EVI/data/Italy.rda")
Italy
deviant(Italy)
source("mova.r")
source("medvol.r")
source("evi.r")
source("evifcut.r")
source("indic.r")
source("status.r")
source("rollsd.r")
setwd("~/GitHub/EVI/R")
source("mova.r")
source("medvol.r")
source("evi.r")
source("evifcut.r")
source("indic.r")
source("status.r")
source("rollsd.r")
deviant(Italy)
warnings()
new_cases=Italy
lag_1=7
c_1=0.1
w_s =7
c_s=seq(0.01,0.5, 0.01)
#calculate the moving average of new confrimed cases
cases=mova(new_cases)
mova
new_cases
new_cases=Italy$Cases
deviant(new_cases)
evi.graphs(Italy)
evi.graphs=function(EVI_output,graph=c("cases","pv_plus","pv_minus"), ln=T) {
library(ggplot2)
library(cowplot)
EVI_output$cases_1=EVI_output$Cases*EVI_output$Index
EVI_output$cases_1[EVI_output$cases_1 == 0] <- NA
EVI_output$cases_0=EVI_output$Cases*(1-EVI_output$Index)
EVI_output$cases_0[EVI_output$cases_0 == 0] <- NA
EVI_output$pvn=EVI_output$pvn*(1-EVI_output$Index)
EVI_output$pvn[EVI_output$pvn == 0] <- NA
EVI_output$pvs=EVI_output$pvs*EVI_output$Index
EVI_output$pvs[EVI_output$pvs == 0] <- NA
if (graph=="cases" && ln==F) {
sp3<-ggplot(EVI_output, aes(x=Days))+
geom_point(aes(y=(Cases), color=Index>0), size=0.5)+
scale_color_manual(values=c("grey69", "red3"))+
theme(legend.position = "none")+
labs(y = "Cases", x="Days")
#ggtitle(, subtitle = subt)
}
if (graph=="cases" && ln==T) {
sp3<-ggplot(EVI_output, aes(x=Days))+
geom_point(aes(y=log(Cases), color=Index>0), size=0.5)+
scale_color_manual(values=c("grey69", "red3"))+
theme(legend.position = "none")+
labs(y = "ln(Cases)", x="Days")
#ggtitle(, subtitle = subt)
}
if (graph=="pv_plus" && ln==F) {
sp3<-ggplot(EVI_output, aes(x=Days))+
geom_point(aes(y=(cases_1), col=pvs), size=0.5)+
geom_point(aes(y=(cases_0)), col="grey69", size=0.5)+
labs(y = "Cases", x="")+
scale_color_gradient(low = "green", high = "red", limits=c(0, 1))+
labs(color= "PPV")+
theme(legend.position = c(0.95, 0.3),
legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.height = unit(0.5, 'cm'))
}
if (graph=="pv_plus" && ln==T) {
sp3<-ggplot(EVI_output, aes(x=Days))+
geom_point(aes(y=log(cases_1), col=pvs), size=0.5)+
geom_point(aes(y=log(cases_0)), col="grey69", size=0.5)+
labs(y = "ln(Cases)", x="")+
scale_color_gradient(low = "green", high = "red", limits=c(0, 1))+
labs(color= "PPV")+
theme(legend.position = c(0.95, 0.3),
legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.height = unit(0.5, 'cm'))
}
if (graph=="pv_minus" && ln==F) {
sp3<-ggplot(EVI_output, aes(x=Days))+
geom_point(aes(y=(cases_0), col=pvn), size=0.5)+
geom_point(aes(y=(cases_1)), col="grey69", size=0.5)+
labs(y = "Cases")+
scale_color_gradient(low = "green", high = "red", limits=c(0, 1))+
labs(color= "NPV")+
theme(legend.position = c(0.95, 0.3),
legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.height = unit(0.5, 'cm'))
}
if (graph=="pv_minus" && ln==T) {
sp3<-ggplot(EVI_output, aes(x=Days))+
geom_point(aes(y=log(cases_0), col=pvn), size=0.5)+
geom_point(aes(y=log(cases_1)), col="grey69", size=0.5)+
labs(y = "ln(Cases)")+
scale_color_gradient(low = "green", high = "red", limits=c(0, 1))+
labs(color= "NPV")+
theme(legend.position = c(0.95, 0.3),
legend.title = element_text(size=10),
legend.text = element_text(size=8),
legend.key.height = unit(0.5, 'cm'))
}
print(sp3)
}
evi.graphs(Italy)
names(Italy)
Italy$Cases
Italy$Index
load("~/GitHub/EVI/data/Italy.rda")
Italy<-data.frame(Italy)
Italy$Index
as.numeric(Italy$Index)
Italy
Italy$pvs
library(readxl)
Italy <- read_excel("~/GitHub/EVI/local/Italy.xlsx")
View(Italy)
Italy$Index
as.data.frame(Italy)$Index
data.frame(Italy)$Index
library(readxl)
Italy <- read_excel("~/GitHub/EVI/local/Italy.xlsx")
View(Italy)
Italy$Index
usethis::use_data(Italy)
usethis::use_data(Italy,overwrite = T)
evi.graphs(Italy)
Italy$Index
Italy$Cases
library(readxl)
Italy <- read_excel("~/GitHub/EVI/local/Italy.xlsx")
View(Italy)
evi.graphs(Italy)
usethis::use_data(Italy,overwrite = T)
remotes::install_github("ku-awdc/EVI")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#' @param int rolling window/time interval on which the moving average will be calculated
#'
#' @examples
#' cases=c(2,2,1,4,9,10,23,10,9,10,14,12,10)
#' mova=mova(cases, 7)
#' 2.000000  2.000000  1.666667  2.250000
#' 3.600000  4.666667  7.285714  8.428571
#' 9.428571 10.714286 12.142857 12.571429
#' 12.571429
#' @export
mova=function(cases, int=7){
ncases=rep(NA, length(cases))
for (i in 1:length(cases)){
ncases[i]=mean(cases[((i+1)-min(int,i)):i])
}
return(ncases)
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("mova"))
devtools::document()
remotes::install_github("ku-awdc/EVI")
ls("package:EVI")
require(EVI)
ls("package:EVI")
data("Italy")
evi.graphs(Italy)
deviant(Italy$ncases)
deviant(Italy$ncases)
ls("package:EVI")
mova
deviant(Italy$ncases)
remotes::install_github("ku-awdc/EVI")
require(EVI)
deviant(Italy$ncases)
data("Italy")
deviant(Italy$ncases)
devtools::document()
remotes::install_github("ku-awdc/EVI")
?deviant
require(EVI)
?deviant
deviant()
?deviant
?mova
?deviant
devtools::document()
?deviant
devtools::document()
